plugins {
    id('java')
    id('com.diffplug.spotless') version('6.25.0')
    id('com.github.johnrengelman.shadow') version('8.1.1')
}

sourceCompatibility = targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'NeuralNexus'
        url = 'https://maven.neuralnexus.dev/releases'
    }
    maven {
        name = 'NeuralNexusSnapshots'
        url = 'https://maven.neuralnexus.dev/snapshots'
    }
}

dependencies {
    // Discord
    implementation('net.dv8tion:JDA:5.0.0-beta.19') {
        exclude(module: 'opus-java')
    }
    implementation('org.slf4j:slf4j-api:1.7.32')
    implementation('org.slf4j:slf4j-simple:1.7.32')

    // Telegram
    implementation('com.github.pengrad:java-telegram-bot-api:7.1.0')

    // API/WebSocket server
    implementation('io.javalin:javalin:6.1.2')
    implementation('com.neovisionaries:nv-websocket-client:2.14')

    compileOnly("dev.neuralnexus:taterlib-api:${taterlib_version}")
    compileOnly("dev.neuralnexus:entrypoint-spoof:0.1.5")

    compileOnly('org.spongepowered:configurate-hocon:4.1.2')
    compileOnly('com.google.code.gson:gson:2.10.1')
    compileOnly('com.google.guava:guava:33.0.0-jre')
}

tasks.withType(ProcessResources).configureEach {
    filesMatching([
            'plugin.yml',
            'bungee.yml',
            'fabric.mod.json',
            'META-INF/mods.toml', 'mcmod.info', 'pack.mcmeta',
            'META-INF/sponge_plugins.json',
            'velocity-plugin.json'
    ]) {
        expand project.properties
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '.gitattributes', '.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        importOrder()
        removeUnusedImports()
        cleanthat()
        googleJavaFormat('1.17.0').aosp().formatJavadoc(true).reorderImports(true)
        formatAnnotations()
        licenseHeader """/**
 * Copyright (c) \$YEAR Dylan Sperrer - dylan@sperrer.ca
 * The project is Licensed under <a href="https://github.com/p0t4t0sandwich/Switchboard/blob/dev/LICENSE">GPL-3</a>
 * The API is Licensed under <a href="https://github.com/p0t4t0sandwich/Switchboard/blob/dev/LICENSE-API">MIT</a>
 */

"""
    }
}

shadowJar {
    dependencies {
        exclude('META-INF/maven/**')
        exclude('META-INF/proguard/**')
        exclude('META-INF/services/**')
        exclude('META-INF/versions/**')
        exclude('META-INF/*LICENSE*')
        exclude('META-INF/*NOTICE*')
        exclude('META-INF/*kotlin_module')

        exclude(dependency('com.google.code.gson:gson:2.10.1'))
    }
    relocate('org.intellij', "${group_id}.${project_id}.lib.intellij")
    relocate('org.jetbrains', "${group_id}.${project_id}.lib.jetbrains")
    relocate('net.dv8tion', "${group_id}.${project_id}.lib.dv8tion")
    relocate('org.apache.commons', "${group_id}.${project_id}.lib.commons")
    relocate('okhttp3', "${group_id}.${project_id}.lib.okhttp3")
    relocate('okio', "${group_id}.${project_id}.lib.okio")
    relocate('kotlin', "${group_id}.${project_id}.lib.kotlin")
    relocate('com.neovisionaries', "${group_id}.${project_id}.lib.neovisionaries")
    relocate('gnu.trove', "${group_id}.${project_id}.lib.trove")
    relocate('com.iwebpp', "${group_id}.${project_id}.lib.iwebpp")
    relocate('com.fasterxml.jackson', "${group_id}.${project_id}.lib.jackson")
    relocate('org.slf4j', "${group_id}.${project_id}.lib.slf4j") {
        exclude('org.slf4j.Logger')
    }

    relocate('com.pengrad.telegrambot', "${group_id}.${project_id}.lib.telegrambot")

    relocate('io.javalin', "${group_id}.${project_id}.lib.javalin")

    // TaterLib bundled dependencies
    relocate('org.spongepowered.configurate', 'dev.neuralnexus.taterlib.lib.configurate')
    relocate('com.typesafe.config', 'dev.neuralnexus.taterlib.lib.typesafe.config')
    relocate('io.leangen.geantyref', 'dev.neuralnexus.taterlib.lib.geantyref')
    relocate('com.google.gson', 'dev.neuralnexus.taterlib.lib.gson')
    relocate('com.google.common', 'dev.neuralnexus.taterlib.lib.guava')
    relocate('com.google.thirdparty', 'dev.neuralnexus.taterlib.lib.google.thirdparty')

    minimize() {
        exclude(dependency("${group_id}:${project_id}:${version}"))
    }

    archiveFileName = "${project_id}-${version}.jar"

    manifest {
        attributes 'Specification-Title': "${project_name}",
                'Specification-Version': version,
                'Specification-Vendor': 'NeuralNexus',
                'Implementation-Version': version,
                'Implementation-Vendor': 'NeuralNexus',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }

    from(["README.md", "LICENSE", "LICENSE-API"]) {
        into("META-INF")
    }
}

tasks.build.dependsOn(spotlessApply)

artifacts {
    archives(shadowJar)
}
